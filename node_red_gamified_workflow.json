[
  {
    "id": "game-data-input",
    "type": "http in",
    "z": "flow1",
    "name": "Game Data Input",
    "url": "/game-data",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 140,
    "y": 200,
    "wires": [["game-data-parser"]]
  },
  {
    "id": "game-data-parser",
    "type": "function",
    "z": "flow1",
    "name": "Parse Game Data",
    "func": "const gameData = msg.payload;\n\n// Transform game data to schedule format\nconst scheduleData = {\n    date: gameData.date || new Date().toISOString().split('T')[0],\n    person: gameData.person || 'Player',\n    score: gameData.score || 0,\n    timestamp: gameData.timestamp,\n    \n    // Map game metrics to schedule metrics\n    energyLevel: Math.min(5, Math.max(1, Math.round((gameData.gameData.energy / 10) * 5) || 3)),\n    taskProductivity: Math.min(5, Math.max(1, Math.round((gameData.gameData.tasks / 8) * 5) || 3)),\n    focusQuality: Math.min(5, Math.max(1, Math.round((gameData.gameData.focus / 6) * 5) || 3)),\n    socialEngagement: Math.min(5, Math.max(1, Math.round((gameData.gameData.social / 4) * 5) || 3)),\n    distractionLevel: Math.max(1, Math.min(5, 5 - Math.round((gameData.gameData.distractions / 3) * 4))),\n    \n    // Calculate derived metrics\n    overallProductivity: Math.round((gameData.score / 100) * 5) || 1,\n    gameMetrics: gameData.gameData,\n    rawGameData: gameData\n};\n\n// Add engagement score based on game performance\nscheduleData.engagementScore = Math.round(\n    (scheduleData.energyLevel + scheduleData.taskProductivity + scheduleData.focusQuality) / 3\n);\n\nmsg.payload = scheduleData;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 200,
    "wires": [["schedule-calculations"]]
  },
  {
    "id": "schedule-calculations",
    "type": "function",
    "z": "flow1",
    "name": "Calculate Schedule Metrics",
    "func": "const data = msg.payload;\n\n// Calculate weighted productivity score\nconst weightedProductivity = (\n    (data.energyLevel * 0.3) +\n    (data.taskProductivity * 0.4) +\n    (data.focusQuality * 0.3)\n);\n\n// Calculate attention efficiency\nconst attentionEfficiency = data.focusQuality / Math.max(1, data.distractionLevel);\n\n// Calculate social balance score\nconst socialBalance = Math.min(5, data.socialEngagement + (data.focusQuality * 0.2));\n\n// Generate insights based on game performance\nlet insights = [];\nif (data.energyLevel >= 4) {\n    insights.push('High energy day - great for challenging tasks!');\n} else if (data.energyLevel <= 2) {\n    insights.push('Low energy detected - consider rest and recovery.');\n}\n\nif (data.taskProductivity >= 4) {\n    insights.push('Excellent task completion rate!');\n} else if (data.taskProductivity <= 2) {\n    insights.push('Task productivity could be improved.');\n}\n\nif (data.focusQuality >= 4) {\n    insights.push('Outstanding focus quality!');\n} else if (data.focusQuality <= 2) {\n    insights.push('Focus quality needs attention.');\n}\n\nif (data.gameMetrics.distractions > 5) {\n    insights.push('High distraction count - consider environment optimization.');\n}\n\n// Add calculated metrics to payload\nmsg.payload.calculations = {\n    weightedProductivity: Math.round(weightedProductivity * 100) / 100,\n    attentionEfficiency: Math.round(attentionEfficiency * 100) / 100,\n    socialBalance: Math.round(socialBalance * 100) / 100,\n    insights: insights,\n    recommendedActions: generateRecommendations(data)\n};\n\nfunction generateRecommendations(data) {\n    const recommendations = [];\n    \n    if (data.energyLevel <= 2) {\n        recommendations.push('Take a break and recharge');\n        recommendations.push('Consider adjusting sleep schedule');\n    }\n    \n    if (data.taskProductivity <= 2) {\n        recommendations.push('Break tasks into smaller chunks');\n        recommendations.push('Use time-blocking techniques');\n    }\n    \n    if (data.focusQuality <= 2) {\n        recommendations.push('Minimize distractions in workspace');\n        recommendations.push('Try the Pomodoro technique');\n    }\n    \n    if (data.socialEngagement <= 2) {\n        recommendations.push('Schedule social interactions');\n        recommendations.push('Take collaborative breaks');\n    }\n    \n    return recommendations;\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 580,
    "y": 200,
    "wires": [["split-game-output"]]
  },
  {
    "id": "split-game-output",
    "type": "function",
    "z": "flow1",
    "name": "Split Game Output",
    "func": "const data = msg.payload;\n\n// Create different output streams\nconst gameReport = { payload: data, topic: 'game-report' };\nconst scheduleData = { payload: data, topic: 'schedule-data' };\nconst insights = { payload: data, topic: 'insights' };\nconst response = { payload: data, topic: 'response' };\n\nreturn [gameReport, scheduleData, insights, response];",
    "outputs": 4,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 800,
    "y": 200,
    "wires": [["save-game-report"], ["format-schedule-csv"], ["generate-insights"], ["game-response"]]
  },
  {
    "id": "save-game-report",
    "type": "file",
    "z": "flow1",
    "name": "Save Game Report",
    "filename": "/data/game_reports/{{payload.date}}_{{payload.person}}_game_report.json",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "true",
    "encoding": "utf8",
    "x": 1020,
    "y": 120,
    "wires": [[]]
  },
  {
    "id": "format-schedule-csv",
    "type": "function",
    "z": "flow1",
    "name": "Format Schedule CSV",
    "func": "const data = msg.payload;\n\nconst csvRow = {\n    Date: data.date,\n    Person: data.person,\n    'Game Score': data.score,\n    'Energy Level': data.energyLevel,\n    'Task Productivity': data.taskProductivity,\n    'Focus Quality': data.focusQuality,\n    'Social Engagement': data.socialEngagement,\n    'Distraction Level': data.distractionLevel,\n    'Overall Productivity': data.overallProductivity,\n    'Engagement Score': data.engagementScore,\n    'Weighted Productivity': data.calculations.weightedProductivity,\n    'Attention Efficiency': data.calculations.attentionEfficiency,\n    'Social Balance': data.calculations.socialBalance,\n    'Energy Slices': data.gameMetrics.energy,\n    'Task Slices': data.gameMetrics.tasks,\n    'Focus Slices': data.gameMetrics.focus,\n    'Social Slices': data.gameMetrics.social,\n    'Distraction Hits': data.gameMetrics.distractions,\n    'Timestamp': data.timestamp\n};\n\nmsg.payload = csvRow;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1020,
    "y": 180,
    "wires": [["save-schedule-csv"]]
  },
  {
    "id": "save-schedule-csv",
    "type": "csv",
    "z": "flow1",
    "name": "Convert to CSV",
    "sep": ",",
    "columns": "",
    "ret": "\\n",
    "temp": "",
    "skip": 0,
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 1240,
    "y": 180,
    "wires": [["save-csv-file"]]
  },
  {
    "id": "save-csv-file",
    "type": "file",
    "z": "flow1",
    "name": "Save CSV File",
    "filename": "/data/exports/gamified_schedule_data.csv",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "false",
    "encoding": "utf8",
    "x": 1440,
    "y": 180,
    "wires": [[]]
  },
  {
    "id": "generate-insights",
    "type": "function",
    "z": "flow1",
    "name": "Generate Insights",
    "func": "const data = msg.payload;\n\n// Create detailed insights report\nconst insightsReport = {\n    date: data.date,\n    person: data.person,\n    summary: {\n        overallScore: data.score,\n        productivityLevel: getProductivityLevel(data.calculations.weightedProductivity),\n        focusState: getFocusState(data.focusQuality),\n        energyState: getEnergyState(data.energyLevel)\n    },\n    gameMetrics: data.gameMetrics,\n    insights: data.calculations.insights,\n    recommendations: data.calculations.recommendedActions,\n    trends: {\n        energyTrend: data.energyLevel >= 4 ? 'high' : data.energyLevel <= 2 ? 'low' : 'moderate',\n        productivityTrend: data.taskProductivity >= 4 ? 'high' : data.taskProductivity <= 2 ? 'low' : 'moderate',\n        focusTrend: data.focusQuality >= 4 ? 'excellent' : data.focusQuality <= 2 ? 'poor' : 'good'\n    },\n    timestamp: data.timestamp\n};\n\nfunction getProductivityLevel(score) {\n    if (score >= 4) return 'High Productivity';\n    if (score >= 3) return 'Moderate Productivity';\n    if (score >= 2) return 'Low Productivity';\n    return 'Very Low Productivity';\n}\n\nfunction getFocusState(score) {\n    if (score >= 4) return 'Excellent Focus';\n    if (score >= 3) return 'Good Focus';\n    if (score >= 2) return 'Fair Focus';\n    return 'Poor Focus';\n}\n\nfunction getEnergyState(score) {\n    if (score >= 4) return 'High Energy';\n    if (score >= 3) return 'Moderate Energy';\n    if (score >= 2) return 'Low Energy';\n    return 'Very Low Energy';\n}\n\nmsg.payload = insightsReport;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1020,
    "y": 240,
    "wires": [["save-insights-report"]]
  },
  {
    "id": "save-insights-report",
    "type": "file",
    "z": "flow1",
    "name": "Save Insights Report",
    "filename": "/data/insights/{{payload.date}}_{{payload.person}}_insights.json",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "true",
    "encoding": "utf8",
    "x": 1240,
    "y": 240,
    "wires": [[]]
  },
  {
    "id": "game-response",
    "type": "function",
    "z": "flow1",
    "name": "Prepare Game Response",
    "func": "const data = msg.payload;\n\n// Create response for the game frontend\nconst response = {\n    status: 'success',\n    message: 'Game data processed successfully!',\n    data: {\n        score: data.score,\n        insights: data.calculations.insights.slice(0, 3), // Top 3 insights\n        recommendations: data.calculations.recommendedActions.slice(0, 3), // Top 3 recommendations\n        metrics: {\n            productivity: Math.round(data.calculations.weightedProductivity * 20), // Convert to percentage\n            focus: data.focusQuality * 20,\n            energy: data.energyLevel * 20,\n            social: data.socialEngagement * 20\n        },\n        badges: generateBadges(data),\n        nextGoals: generateNextGoals(data)\n    },\n    timestamp: new Date().toISOString()\n};\n\nfunction generateBadges(data) {\n    const badges = [];\n    \n    if (data.score >= 100) badges.push('🏆 High Scorer');\n    if (data.gameMetrics.energy >= 8) badges.push('⚡ Energy Master');\n    if (data.gameMetrics.tasks >= 10) badges.push('🎯 Task Ninja');\n    if (data.gameMetrics.focus >= 6) badges.push('🧘 Focus Champion');\n    if (data.gameMetrics.social >= 4) badges.push('🤝 Social Butterfly');\n    if (data.gameMetrics.distractions <= 2) badges.push('🛡️ Distraction Shield');\n    \n    return badges;\n}\n\nfunction generateNextGoals(data) {\n    const goals = [];\n    \n    if (data.energyLevel < 4) goals.push('Boost energy levels');\n    if (data.taskProductivity < 4) goals.push('Improve task completion');\n    if (data.focusQuality < 4) goals.push('Enhance focus quality');\n    if (data.socialEngagement < 3) goals.push('Increase social engagement');\n    \n    return goals.length > 0 ? goals : ['Maintain excellent performance!'];\n}\n\nmsg.payload = response;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1020,
    "y": 300,
    "wires": [["http-game-response"]]
  },
  {
    "id": "http-game-response",
    "type": "http response",
    "z": "flow1",
    "name": "Send Game Response",
    "statusCode": "200",
    "headers": {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type, Authorization",
      "Content-Type": "application/json"
    },
    "x": 1240,
    "y": 300,
    "wires": []
  },
  {
    "id": "cors-preflight",
    "type": "http in",
    "z": "flow1",
    "name": "CORS Preflight",
    "url": "/game-data",
    "method": "options",
    "upload": false,
    "swaggerDoc": "",
    "x": 140,
    "y": 360,
    "wires": [["cors-response"]]
  },
  {
    "id": "cors-response",
    "type": "http response",
    "z": "flow1",
    "name": "CORS Response",
    "statusCode": "200",
    "headers": {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type, Authorization"
    },
    "x": 360,
    "y": 360,
    "wires": []
  }
]

