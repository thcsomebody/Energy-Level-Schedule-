[
  {
    "id": "http-input",
    "type": "http in",
    "z": "flow1",
    "name": "Daily Data Input",
    "url": "/daily-data",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 140,
    "y": 300,
    "wires": [["data-parser"]]
  },
  {
    "id": "data-parser",
    "type": "function",
    "z": "flow1",
    "name": "Parse Daily Data",
    "func": "const inputData = msg.payload; const energyData = { beforeSleeping: parseFloat(inputData.beforeSleeping) || 0, afterWaking: parseFloat(inputData.afterWaking) || 0, afterBreakfast: parseFloat(inputData.afterBreakfast) || 0, afterLunch: parseFloat(inputData.afterLunch) || 0, afterDinner: parseFloat(inputData.afterDinner) || 0 }; const perceivedEnergyPercentage = (energyData.afterWaking / 5) * 100; const taskData = { highImpactTasks: inputData.highImpactTasks || [], perceivedImpactScore: parseFloat(inputData.perceivedImpactScore) || 0, actualImpactScore: parseFloat(inputData.actualImpactScore) || 0, taskDifficulty: parseFloat(inputData.taskDifficulty) || 0, taskCategory: inputData.taskCategory || 'unknown' }; const attentionData = { attentionPeakTime: inputData.attentionPeakTime || '', attentionPeakDuration: parseFloat(inputData.attentionPeakDuration) || 0, socialTime: inputData.socialTime || '', socialDuration: parseFloat(inputData.socialDuration) || 0 }; const distractionData = { type: inputData.distractionType || 'internal', timeCost: parseFloat(inputData.distractionTimeCost) || 0, level: parseFloat(inputData.distractionLevel) || 0, stage: inputData.distractionStage || 'focus' }; const focusImpact = distractionData.timeCost > 0 ? (distractionData.timeCost / (parseFloat(inputData.taskDuration) || 1)) : 0; msg.payload = { date: inputData.date || new Date().toISOString().split('T')[0], person: inputData.person || 'unknown', energyData, perceivedEnergyPercentage, taskData, attentionData, distractionData, focusImpact, rawInput: inputData }; return msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 300,
    "wires": [["calculations"]]
  },
  {
    "id": "calculations",
    "type": "function",
    "z": "flow1",
    "name": "Calculate Metrics",
    "func": "const data = msg.payload; const weightedAverage = ((data.perceivedEnergyPercentage / 100) * data.focusImpact + (data.taskData.actualImpactScore / 3) * (parseFloat(data.rawInput.taskDuration) || 0)); const calculateAttentionDecay = (initialAttention, decayConstant, time) => { return initialAttention * Math.exp(-decayConstant * time); }; const calculatePerformanceDecrement = (initialPerf, timeConstant, time, minPerf) => { return initialPerf * Math.exp(-time / timeConstant) + minPerf; }; const calculateAttentionRestoration = (maxAttention, restoreRate, time) => { return maxAttention * (1 - Math.exp(-restoreRate * time)); }; const highImpactTaskCount = data.taskData.highImpactTasks.length; const totalTasks = parseFloat(data.rawInput.totalTasks) || 1; const impactPerPerson = highImpactTaskCount / totalTasks; const tasksWithImpactScore = data.taskData.actualImpactScore > 0 ? 1 : 0; const distributionOfImpact = tasksWithImpactScore / totalTasks; const estimatedTime = parseFloat(data.rawInput.estimatedTime) || 1; const actualTime = parseFloat(data.rawInput.actualTime) || 1; const highEnergyEfficiency = (actualTime / estimatedTime) * 100; msg.payload.calculations = { weightedAverage, impactPerPerson, distributionOfImpact, highEnergyEfficiency, attentionModels: { decay: calculateAttentionDecay(1.0, 0.1, 60), performance: calculatePerformanceDecrement(1.0, 30, 60, 0.2), restoration: calculateAttentionRestoration(1.0, 0.05, 15) } }; return msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 580,
    "y": 300,
    "wires": [["analysis"]]
  },
  {
    "id": "analysis",
    "type": "function",
    "z": "flow1",
    "name": "Generate Analysis",
    "func": "const data = msg.payload; const calc = data.calculations; let chronotypeRecommendation = ''; if (data.attentionData.attentionPeakTime.includes('morning') || data.attentionData.attentionPeakTime.includes('breakfast')) { chronotypeRecommendation = 'Morning Lark: Schedule your most demanding, high-concentration tasks for the morning.'; } else { chronotypeRecommendation = 'Night Owl: Ease into your day with low-energy tasks. Schedule your high-focus work for late afternoon or evening.'; } let energyAssessment = ''; if (data.perceivedEnergyPercentage >= 80) { energyAssessment = 'High energy day - optimal for challenging tasks'; } else if (data.perceivedEnergyPercentage >= 60) { energyAssessment = 'Moderate energy - good for routine tasks'; } else { energyAssessment = 'Low energy - focus on light tasks and recovery'; } let focusQuality = ''; if (data.focusImpact <= 0.3) { focusQuality = 'Excellent focus - minimal distractions'; } else if (data.focusImpact <= 0.6) { focusQuality = 'Good focus - some distractions managed'; } else { focusQuality = 'Poor focus - high distraction impact'; } let taskImpactAssessment = ''; if (calc.impactPerPerson >= 0.7) { taskImpactAssessment = 'High impact day - significant progress made'; } else if (calc.impactPerPerson >= 0.4) { taskImpactAssessment = 'Moderate impact - steady progress'; } else { taskImpactAssessment = 'Low impact - consider task prioritization'; } msg.payload.insights = { chronotypeRecommendation, energyAssessment, focusQuality, taskImpactAssessment, overallScore: { energy: data.perceivedEnergyPercentage, focus: (1 - data.focusImpact) * 100, impact: calc.impactPerPerson * 100, efficiency: calc.highEnergyEfficiency } }; return msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 800,
    "y": 300,
    "wires": [["split-output"]]
  },
  {
    "id": "split-output",
    "type": "function",
    "z": "flow1",
    "name": "Split Output",
    "func": "const data = msg.payload; const jsonOutput = { payload: data, topic: 'json' }; const csvOutput = { payload: data, topic: 'csv' }; const responseOutput = { payload: data, topic: 'response' }; return [jsonOutput, csvOutput, responseOutput];",
    "outputs": 3,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1020,
    "y": 300,
    "wires": [["save-json"], ["csv-formatter"], ["http-response"]]
  },
  {
    "id": "save-json",
    "type": "file",
    "z": "flow1",
    "name": "Save Daily Report",
    "filename": "/data/daily_reports/{{payload.date}}_{{payload.person}}_report.json",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "true",
    "encoding": "utf8",
    "x": 1240,
    "y": 200,
    "wires": [[]]
  },
  {
    "id": "csv-formatter",
    "type": "function",
    "z": "flow1",
    "name": "Format for CSV",
    "func": "const data = msg.payload; const csvRow = { Date: data.date, Person: data.person, 'Perceived Energy %': data.perceivedEnergyPercentage, 'Before Sleeping': data.energyData.beforeSleeping, 'After Waking': data.energyData.afterWaking, 'After Breakfast': data.energyData.afterBreakfast, 'After Lunch': data.energyData.afterLunch, 'After Dinner': data.energyData.afterDinner, 'Perceived Impact Score': data.taskData.perceivedImpactScore, 'Actual Impact Score': data.taskData.actualImpactScore, 'Task Difficulty': data.taskData.taskDifficulty, 'Task Category': data.taskData.taskCategory, 'Attention Peak Time': data.attentionData.attentionPeakTime, 'Attention Peak Duration': data.attentionData.attentionPeakDuration, 'Social Time': data.attentionData.socialTime, 'Social Duration': data.attentionData.socialDuration, 'Distraction Type': data.distractionData.type, 'Distraction Time Cost': data.distractionData.timeCost, 'Distraction Level': data.distractionData.level, 'Focus Impact': data.focusImpact, 'Weighted Average': data.calculations.weightedAverage, 'Impact Per Person': data.calculations.impactPerPerson, 'High Energy Efficiency': data.calculations.highEnergyEfficiency, 'Energy Assessment': data.insights.energyAssessment, 'Focus Quality': data.insights.focusQuality, 'Task Impact Assessment': data.insights.taskImpactAssessment, 'Overall Energy Score': data.insights.overallScore.energy, 'Overall Focus Score': data.insights.overallScore.focus, 'Overall Impact Score': data.insights.overallScore.impact, 'Overall Efficiency Score': data.insights.overallScore.efficiency }; msg.payload = csvRow; return msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1240,
    "y": 300,
    "wires": [["csv-output"]]
  },
  {
    "id": "csv-output",
    "type": "csv",
    "z": "flow1",
    "name": "Convert to CSV",
    "sep": ",",
    "columns": "",
    "ret": "\\n",
    "temp": "",
    "skip": 0,
    "strings": true,
    "include_empty_strings": "",
    "include_null_values": "",
    "x": 1460,
    "y": 300,
    "wires": [["save-csv"]]
  },
  {
    "id": "save-csv",
    "type": "file",
    "z": "flow1",
    "name": "Save CSV",
    "filename": "/data/exports/daily_schedule_data.csv",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "false",
    "encoding": "utf8",
    "x": 1640,
    "y": 300,
    "wires": [[]]
  },
  {
    "id": "http-response",
    "type": "http response",
    "z": "flow1",
    "name": "Send Response",
    "statusCode": "200",
    "headers": {},
    "x": 1240,
    "y": 400,
    "wires": []
  },
  {
    "id": "daily-trigger",
    "type": "inject",
    "z": "flow1",
    "name": "Daily Reminder",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "00 20 * * *",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "reminder",
    "payloadType": "str",
    "x": 140,
    "y": 500,
    "wires": [["reminder-message"]]
  },
  {
    "id": "reminder-message",
    "type": "function",
    "z": "flow1",
    "name": "Generate Reminder",
    "func": "const today = new Date().toISOString().split('T')[0]; const reminderMessage = { subject: 'Daily Schedule Data Entry Reminder', message: 'Please complete your daily schedule data entry for ' + today + '. Include energy levels, task impact scores, attention peak times, distraction data, and focus duration. Submit via the HTTP endpoint: POST /daily-data', date: today }; msg.payload = reminderMessage; return msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 360,
    "y": 500,
    "wires": [["send-notification"]]
  },
  {
    "id": "send-notification",
    "type": "http request",
    "z": "flow1",
    "name": "Send Notification",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "https://api.example.com/send-notification",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 580,
    "y": 500,
    "wires": [[]]
  }
]

